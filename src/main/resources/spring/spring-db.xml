<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:p="http://www.springframework.org/schema/p"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:jdbc="http://www.springframework.org/schema/jdbc"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation=
               "http://www.springframework.org/schema/beans
               http://www.springframework.org/schema/beans/spring-beans.xsd
               http://www.springframework.org/schema/context
               http://www.springframework.org/schema/context/spring-context.xsd
               http://www.springframework.org/schema/jdbc
               http://www.springframework.org/schema/jdbc/spring-jdbc.xsd
               http://www.springframework.org/schema/tx
               http://www.springframework.org/schema/tx/spring-tx.xsd">


    <context:property-placeholder location="classpath:db/postgres.properties" system-properties-mode="OVERRIDE"/>

<!--    <context:property-placeholder location="classpath:/db/heroku.properties" system-properties-mode="OVERRIDE"/>-->

    <context:component-scan base-package="edu.born.**.repository"/>

    <jdbc:initialize-database data-source="dataSource" enabled="${database.init}">
        <jdbc:script location="classpath:db/${jdbc.initLocation}"/>
        <jdbc:script encoding="utf-8" location="classpath:db/POPULATE_DB.sql"/>
    </jdbc:initialize-database>

<!--    <bean class="java.net.URI" id="dbUrl">-->
<!--        <constructor-arg value="#{systemEnvironment['DATABASE_URL']}"/>-->
<!--    </bean>-->

    <!--    <bean id="dataSource"-->
    <!--          class="org.apache.tomcat.jdbc.pool.DataSource"-->
    <!--          p:url="#{ 'jdbc:postgresql://' + @dbUrl.getHost() + @dbUrl.getPath() }"-->
    <!--          p:username="#{ @dbUrl.getUserInfo().split(':')[0] }"-->
    <!--          p:password="#{ @dbUrl.getUserInfo().split(':')[1] }"-->
    <!--          p:driverClassName="org.postgresql.Driver"-->
    <!--          p:validationQuery="SELECT 1"-->
    <!--          p:maxActive="10"-->
    <!--          p:minIdle="2"-->
    <!--          p:maxWait="20000"-->
    <!--          p:initialSize="2"-->
    <!--          p:maxIdle="5"-->
    <!--          p:testOnBorrow="true"-->
    <!--          p:removeAbandoned="true"-->
    <!--          p:testOnConnect="true"-->
    <!--          p:testWhileIdle="true"/>-->

    <bean id="dataSource"
          class="org.springframework.jdbc.datasource.DriverManagerDataSource"
          p:driverClassName="org.postgresql.Driver"
          p:url="${database.url}"
          p:username="${database.username}"
          p:password="${database.password}"/>


    <tx:annotation-driven/>


    <bean id="entityManagerFactory" class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean"
          p:dataSource-ref="dataSource"
          p:packagesToScan="edu.born.**.model">

        <property name="jpaPropertyMap">
            <map>
                <entry key="#{T(org.hibernate.cfg.AvailableSettings).FORMAT_SQL}" value="${hibernate.format_sql}"/>
                <entry key="#{T(org.hibernate.cfg.AvailableSettings).USE_SQL_COMMENTS}"
                       value="${hibernate.use_sql_comments}"/>
            </map>
        </property>

        <property name="jpaVendorAdapter">
            <bean class="org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter"
                  p:showSql="${jpa.showSql}">
            </bean>
        </property>


    </bean>

    <!-- Transaction manager for a single JPA EntityManagerFactory (alternative to JTA) -->
    <bean id="transactionManager" class="org.springframework.orm.jpa.JpaTransactionManager"
          p:entityManagerFactory-ref="entityManagerFactory"/>


</beans>